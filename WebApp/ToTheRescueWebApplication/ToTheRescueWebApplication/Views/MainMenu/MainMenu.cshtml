@{
    Layout = null;
    ViewBag.Title = "MainMenu";
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <link rel="stylesheet" type="text/css" href="~/CSS/MainMenu.css" />
    @{ string toggleSound = HttpContext.Current.Session["toggleSound"].ToString(); }
    @{ string toggleMusic = HttpContext.Current.Session["toggleMusic"].ToString(); }
    <script>
        var elephant = new Audio();
        elephant.src = "../Audio/Elephant.mp3";
        elephant.volume = 0.15;
        var lion = new Audio();
        lion.src = "../Audio/Lion_Roar.mp3";
        lion.volume = 0.15;
        @if (toggleSound == "True")
        {
            <text>
                lion.volume = 0;
                elephant.volume = 0;
            </text>
        }
    </script>
    <title>@ViewBag.Title</title>
</head>
<body>
    @if (toggleMusic == "False")
    {
        @*<audio controls loop id="menuMusic" source src="../Audio/bensound-sunny.mp3" autoplay hidden="hidden"></audio>

            <script>
                var vid = document.getElementById("menuMusic");
                vid.volume = 0.05;
            </script>*@

        <script type="text/javascript">
            //api code
            try {
                window.AudioContext = window.AudioContext || window.webkitAudioContext;
                window.audioContext = new window.AudioContext();
            } catch (e) {
                console.log("No Web Audio API support");
            }

            /*
             * WebAudioAPISoundManager Constructor
             */
            var WebAudioAPISoundManager = function (context) {
                this.context = context;
                this.bufferList = {};
                this.playingSounds = {};
            };

            /*
             * WebAudioAPISoundManager Prototype
             */
            WebAudioAPISoundManager.prototype = {
                addSound: function (url) {
                    // Load buffer asynchronously
                    var request = new XMLHttpRequest();
                    request.open("GET", url, true);
                    request.responseType = "arraybuffer";

                    var self = this;

                    request.onload = function () {
                        // Asynchronously decode the audio file data in request.response
                        self.context.decodeAudioData(
                            request.response,

                            function (buffer) {
                                if (!buffer) {
                                    alert('error decoding file data: ' + url);
                                    return;
                                }
                                self.bufferList[url] = buffer;

                                //this will become problematic if this works
                                bgMusic.play();
                            });
                    };

                    request.onerror = function () {
                        alert('BufferLoader: XHR error');
                    };

                    request.send();
                },
                stopSoundWithUrl: function (url) {
                    if (this.playingSounds.hasOwnProperty(url)) {
                        for (var i in this.playingSounds[url]) {
                            if (this.playingSounds[url].hasOwnProperty(i))
                                this.playingSounds[url][i].noteOff(0);
                        }
                    }
                }
            };

            /*
             * WebAudioAPISound Constructor
             */
            var WebAudioAPISound = function (url, options) {
                this.settings = {
                    loop: false
                };

                for (var i in options) {
                    if (options.hasOwnProperty(i))
                        this.settings[i] = options[i];
                }

                this.url = url + '.mp3';
                window.webAudioAPISoundManager = window.webAudioAPISoundManager || new WebAudioAPISoundManager(window.audioContext);
                this.manager = window.webAudioAPISoundManager;
                this.manager.addSound(this.url);
            };

            /*
             * WebAudioAPISound Prototype
             */
            WebAudioAPISound.prototype = {
                play: function () {
                    var buffer = this.manager.bufferList[this.url];
                    //Only play if it's loaded yet
                    if (typeof buffer !== "undefined") {
                        var source = this.makeSource(buffer);
                        source.loop = this.settings.loop;
                        source.start(0);

                        if (!this.manager.playingSounds.hasOwnProperty(this.url))
                            this.manager.playingSounds[this.url] = [];
                        this.manager.playingSounds[this.url].push(source);
                    }
                },
                stop: function () {
                    this.manager.stopSoundWithUrl(this.url);
                },
                getVolume: function () {
                    return this.translateVolume(this.volume, true);
                },
                //Expect to receive in range 0-100
                setVolume: function (volume) {
                    this.volume = this.translateVolume(volume);
                },
                translateVolume: function (volume, inverse) {
                    return inverse ? volume * 100 : volume / 100;
                },
                makeSource: function (buffer) {
                    var source = this.manager.context.createBufferSource();
                    var gainNode = this.manager.context.createGain();
                    //gainNode.gain.value = this.volume;
                    gainNode.gain.value = this.volume ? this.volume : 0.5
                    source.buffer = buffer;
                    source.connect(gainNode);
                    gainNode.connect(this.manager.context.destination);
                    return source;
                }
            };

            //using the api
            var bgMusic = new WebAudioAPISound("../Audio/bensound-sunny");
        </script>
    }
    <h2>Main Menu</h2>
    <nav id="mainMenuNav">
        <ul id="navLinks">
            <li>
                <a href="@Url.Action("Play", "Play")" onmouseover="elephant.play()">Play</a>
            </li>
            <li>
                @if (User.Identity.IsAuthenticated)
                {
                    @Html.ActionLink("Options", "Options", "Options")
                }
            <li />
            <li>
                @if (User.Identity.IsAuthenticated)
                {
                    <a href="@Url.Action("Sanctuary", "AnimalSanctuary")" onmouseover="lion.play()">Animal Sanctuary</a>
                }
            <li />
            <li>
                @if (!User.Identity.IsAuthenticated)
                {
                    <a href="@Url.Action("Login", "Login")">Home</a>
                }
            <li />
        </ul>
    </nav>
</body>
</html>