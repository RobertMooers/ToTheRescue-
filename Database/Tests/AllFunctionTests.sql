/**********************************************************************
* Purpose: Tests the GetPrevMiniGames function.
  Should return last three minigames played for profile (or fewer if user
  hasn't played three games)
***********************************************************************/
--DROP TABLE #temp

CREATE TABLE #temp(MiniGameID INT)INSERT INTO #temp
VALUES (2), (14), (16)

IF(SELECT COUNT(*) AS UnMatchedIDs
FROM dbo.GetPrevMiniGames(4) AS retTable
	FULL OUTER JOIN (SELECT *
	   	  FROM #temp) AS expected ON (retTable.MiniGameID = expected.MiniGameID)
WHERE (retTable.MiniGameID IS NULL) OR (expected.MiniGameID IS NULL))
	 > 0	PRINT 'Failure, didn''t return correct MiniGameIDs'ELSE	PRINT 'Success, correct MiniGameIDs returned'
DROP TABLE #temp; --drop temp table
	PRINT '-----------------------------------------------------------'

/**********************************************************************
* Purpose: Tests the GetMapNodes function
  Should return rows for all nodes for map
***********************************************************************/
--DROP TABLE #temp

CREATE TABLE #temp(NodeID INT, XCoordinate INT, YCoordinate INT)
INSERT INTO #temp
VALUES(1, 18, 5),(2, 15, 14),(3, 5, 8),(4, 5, 17),(5, 12, 7),(6, 7, 16);

IF(SELECT COUNT(*) AS UnMatchedNodes
FROM dbo.GetMapNodes(1) AS retTable
	FULL OUTER JOIN (SELECT *
	   	  FROM #temp) AS expected ON (retTable.NodeID = expected.NodeID AND retTable.XCoordinate = expected.XCoordinate
										AND retTable.YCoordinate = expected.YCoordinate)
WHERE (retTable.NodeID IS NULL OR retTable.XCoordinate IS NULL OR retTable.YCoordinate IS NULL) OR 
		(expected.NodeID IS NULL OR expected.XCoordinate IS NULL OR expected.YCoordinate IS NULL))
	 > 0	PRINT 'Failure, didn''t return correct MiniGameNodes'ELSE	PRINT 'Success, correct MiniGameNodes returned'
DROP TABLE #temp; --drop temp table
	PRINT '-----------------------------------------------------------'

/********************************************************************************
* Purpose: Tests the GetMapMedia function.
  Should return background sound and background image for map
####THIS ONLY CHECKS IMAGE, SOUND VARBIN IS TOO LONG TO INSERT IN SQL STUDIO###
*********************************************************************************/
--DROP TABLE #tempCREATE TABLE #temp([Images] VARBINARY(MAX), Sound VARBINARY(MAX))INSERT INTO #temp
VALUES(

IF(SELECT COUNT(*) AS UnMatchedMedia
FROM dbo.GetMapMedia(2) AS retTable
	FULL OUTER JOIN (SELECT *
	   	  FROM #temp) AS expected ON (retTable.Images = expected.[Images])
WHERE (retTable.Images IS NULL OR expected.[Images] IS NULL))
	 > 0	PRINT 'Failure, didn''t return correct MiniGameMedia'ELSE	PRINT 'Success, correct MiniGameMedia returned'
DROP TABLE #temp; --drop temp table
	PRINT '-----------------------------------------------------------'

/**********************************************************************
* Purpose: Tests the IsExistingUser function. Given an existing username
* return that it does exist.
***********************************************************************/
BEGIN TRY
	IF (dbo.IsExistingUserName('fakeUser1@gmail.com') = 1)
		PRINT 'SUCCESS: the function said the username already existed.'; 
	ELSE
		PRINT 'FAILURE: the function said the username did not already existed.'; 
END TRY
BEGIN CATCH
	PRINT 'Error ' + CONVERT(varchar, ERROR_NUMBER(), 1) + ': ' + ERROR_MESSAGE(); 
END CATCH
PRINT '-------------------------------------------------------------------';

/**********************************************************************
* Purpose: Tests the IsExistingUser function. Given a non existing username
* return false.
***********************************************************************/
BEGIN TRY
	IF (dbo.IsExistingUserName('fakeUser1@gmail.co') = 1)
		PRINT 'FAILURE: the function said the username already existed.'; 
	ELSE
		PRINT 'SUCCESS: the function said the username did not already exist.'; 
END TRY
BEGIN CATCH
	PRINT 'Error ' + CONVERT(varchar, ERROR_NUMBER(), 1) + ': ' + ERROR_MESSAGE(); 
END CATCH
PRINT '-------------------------------------------------------------------';

/**********************************************************************
* Purpose: Tests the IsValidPassword function. Given a valid password
* for a given username, return true.
***********************************************************************/
BEGIN TRY
	IF (dbo.IsValidPassword('fakeUser1@gmail.com', 'WeJcFMQ/8+8QJ/w0hHh+0g==') = 1)
		PRINT 'SUCCESS: the function said the password was valid.'; 
	ELSE
		PRINT 'FAILURE: the function said the password not valid.'; 
END TRY
BEGIN CATCH
	PRINT 'Error ' + CONVERT(varchar, ERROR_NUMBER(), 1) + ': ' + ERROR_MESSAGE(); 
END CATCH
PRINT '-------------------------------------------------------------------';

/**********************************************************************
* Purpose: Tests the IsValidPassword function. Given an invalid password
* for a given username, return false.
***********************************************************************/
BEGIN TRY
	IF (dbo.IsValidPassword('fakeUser1@gmail.com', 'WeJcFMQ/8+8QJ/w0hHh+0g=') = 1)
		PRINT 'FAILURE: the function said the password was valid.'; 
	ELSE
		PRINT 'SUCCESS: the function said the password was not valid.'; 
END TRY
BEGIN CATCH
	PRINT 'Error ' + CONVERT(varchar, ERROR_NUMBER(), 1) + ': ' + ERROR_MESSAGE(); 
END CATCH
PRINT '-------------------------------------------------------------------';

/**********************************************************************
* Purpose: Tests the GetProfileProgressInfo function. Ensures that
* the correct CurrentMap, CurrentNode and AnimalID for a certain ProfileID
* is returned.
***********************************************************************/
BEGIN TRY
	CREATE TABLE #temp(CurrentMap INT, CurrentNode INT, AnimalID INT)
	INSERT INTO #temp
	VALUES (3, 6, 4);
	IF (SELECT COUNT(*) AS UnMatchedProgress
		FROM dbo.GetProfileProgressInfo(3) AS returnTable
		FULL OUTER JOIN (SELECT * FROM #temp) AS expected ON
			(returnTable.CurrentMap = expected.CurrentMap 
			AND returnTable.CurrentNode = expected.CurrentNode AND 
			returnTable.AnimalID = expected.AnimalID)
		WHERE (returnTable.CurrentMap IS NULL OR returnTable.CurrentNode IS NULL OR 
			   returnTable.AnimalID IS NULL) OR (expected.CurrentMap IS NULL OR 
			   expected.CurrentNode IS NULL OR expected.AnimalID IS NULL)) > 0
		PRINT 'FAILURE: did not return correct ProfileProgress information'
	ELSE
		PRINT 'SUCCESS: the correct ProfileProgress information was returned'
END TRY
BEGIN CATCH
	PRINT 'Error ' + CONVERT(varchar, ERROR_NUMBER(), 1) + ': ' + ERROR_MESSAGE(); 
END CATCH
DROP TABLE #temp;
PRINT '-------------------------------------------------------------------';
